from numpy.lib.stride_tricks import sliding_window_view
# import cupy as cp

def to_shape(a, shape):
    y_, x_ = shape
    y, x = a.shape
    y_pad = (y_-y)
    x_pad = (x_-x)
    return np.pad(a,((y_pad//2, y_pad//2 + y_pad%2), 
                     (x_pad//2, x_pad//2 + x_pad%2)),
                  mode = 'constant')

def goldstein(arr, alpha = 0.2, window_size = 32):
    """
    Apply goldstein filter to complex numpy arr

    Args:
    arr: Complex numpy array of phases
    alpha: degree of filtering. Ranges from no filter @ 0 to 1/2 bandwidth @ 1
    window_size: size of window in samples to apply filter over

    Returns:
    filtered: filtered complex numpy array
    """

    Z = np.fft.fft2(sliding_window_view(arr, (window_size, window_size)))
    psd_sc = np.abs(Z)**alpha
    Z = Z * psd_sc
    x = np.fft.ifft2(Z)


    wgts = (1 - np.abs(2*(np.arange(window_size) - window_size/2)/(window_size+1))) / (window_size*window_size)
    filtered = np.average(np.average(x, axis = -1, weights= wgts), axis= -1, weights = wgts)

    filtered = to_shape(filtered, arr.shape)

    return filtered
